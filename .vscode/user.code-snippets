{
  // Place your snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:

  // [Snippets in Visual Studio Code]()
  // https://code.visualstudio.com/docs/editor/userdefinedsnippets

  // [(88) How To Create Custom VSCode Snippets - YouTube]()
  // https://www.youtube.com/watch?v=TGh2NpCIDlc

  // [snippet generator]()
  // https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode

  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "cl",
    "body": [
      // "console.${2|info,log,table,dir|}(`${1:here}`);"
      // "console.${2|info,log,table,dir|}(${TM_CURRENT_LINE:`${1:here}`});"
      "console.log(${TM_LINE_NUMBER:`${1:here}`});"
    ],
    "description": "Log output to console"
  },
  "Print to CLIPBOARD": {
    "scope": "javascript,typescript",
    "prefix": "sn_cp",
    "body": ["console.log(${CLIPBOARD});"],
    "description": "Log output to CLIPBOARD"
  },
  "des": {
    "scope": "javascript,html",
    "prefix": "hello",
    "body": "$BLOCK_COMMENT_START \n\n ${1} \n\n$BLOCK_COMMENT_END"
  },
  "document.getElementById($1)": {
    "prefix": "dog",
    "body": ["const dom = document.getElementById('$1')"],
    "description": "document.getElementById($1)"
  },
  "less+": {
    "prefix": "sn_less-1",
    "body": [
      "$BLOCK_COMMENT_START",
      "+_ 代表的是 空格",
      ".Animation() {",
      "  transform+_: scale(2);",
      "}",
      ".main1 {",
      "  .Animation();",
      "  transform+_: rotate(15deg);",
      "}",
      ".main1 {",
      "  transform: scale(2) rotate(15deg);",
      "}",
      "+ 代表的是 逗号",
      ".boxShadow() {",
      "  box-shadow+: inset 0 0 10px #555;",
      "}",
      ".main2 {",
      "  .boxShadow();",
      "  box-shadow+: 0 0 20px black;",
      "}",
      ".main2 {",
      "  box-shadow: inset 0 0 10px #555, 0 0 20px black;",
      "}",
      "$BLOCK_COMMENT_END"
    ],
    "description": "less+"
  },
  "单行文本溢出显示省略号": {
    "prefix": "sn_css-text-overflow",
    "body": [
      "overflow: hidden;",
      "text-overflow: ellipsis;",
      "white-space: nowrap;"
    ],
    "description": "CSS-单行多行文本溢出显示省略号"
  },
  "三行文本溢出显示省略号": {
    "prefix": "css-text-overflow-3-line",
    "body": [
      "display: -webkit-box;",
      "-webkit-box-orient: vertical;",
      "-webkit-line-clamp: 3;",
      "overflow: hidden;"
    ],
    "description": "CSS-多行文本溢出显示省略号"
  },
  "pipeline": {
    "prefix": "sn_pipeline",
    "body": [
      "$BLOCK_COMMENT_START",
      "const add = a => a + 1;",
      "const times = a => a * 2;",
      "const sum = (a, b, c) => a + b + c; ",
      "const pipe = fns => fns.reduce((f, g) => (...args) => g(f(...args)));",
      "const result = pipe([sum, add, times])(2, 1, 3);",
      "console.log(result); // 14",
      "$BLOCK_COMMENT_END"
    ],
    "description": "pipeline"
  },
  "彩色日志": {
    "prefix": "sn_colorLog",
    "body": [
      "const tips = msg =>",
      "  console.log(",
      "    '%c%s%s%s',",
      "    'color: #fff; font-weight: bold;background-color:#21c366;',",
      "    ' ',",
      "    msg,",
      "    ' ',",
      "  );",
      "const listen = msg =>",
      "  console.log(",
      "    '%c%s%s%s',",
      "    'color: #fff; font-weight: bold;background-color:rgb(255,69,0);',",
      "    ' ',",
      "    msg,",
      "    ' ',",
      "  );",
      "",
      "export { tips, listen };",
      ""
    ],
    "description": "colorful-console-log"
  },
  "asyncPool_snippet": {
    "prefix": "sn_asyncPool",
    "description": "asyncPool:并发限制器",
    "body": [
      "// asyncPool",
      "async function asyncPool(poolLimit, array, iteratorFn) {",
      "  const ret = [];",
      "  const executing = [];",
      "",
      "  for (const item of array) {",
      "    const p = Promise.resolve().then(() => iteratorFn(item));",
      "    ret.push(p);",
      "    const e = p.then(() => executing.splice(executing.indexOf(e), 1));",
      "    executing.push(e);",
      "    if (executing.length >= poolLimit) {",
      "      await Promise.race(executing);",
      "    }",
      "  }",
      "  return Promise.all(ret);",
      "}",
      "",
      "const timeout = i => new Promise(resolve => setTimeout(() => resolve(i), i));",
      "asyncPool(2, [300, 500, 400, 200], timeout).then(r => console.log('r', r));",
      "",
      "// r [ 300, 500, 400, 200 ]",
      ""
    ]
  },
  "fake-array-snippet": {
    "description": "填充假数据",
    "prefix": "sn_fake_array",
    "body": [
      "Array.from(Array(10).keys());",
      "// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];",
      "[...Array(4).keys()].map(k => k + 1);",
      "//  [1, 2, 3, 4]",
      ""
    ]
  },
  "Fetch Request": {
    "scope": "javascript,typescript",
    "prefix": "sn_fetch",
    "body": [
      "const api=''",
      "fetch(api)",
      " .then(response => response.json())",
      " .then(data => data)",
      " .catch(error => console.error(error));"
    ],
    "description": "Fetch request"
  },
  "less变量": {
    "prefix": "sn_less_variables",
    "body": [
      "// Variables",
      "@link-color:        #428bca; // sea blue",
      "@link-color-hover:  darken(@link-color, 10%);",
      "",
      "// Usage",
      "a,",
      ".link {",
      "  color: @link-color;",
      "}",
      "a:hover {",
      "  color: @link-color-hover;",
      "}",
      ".widget {",
      "  color: #fff;",
      "  background: @link-color;",
      "}"
    ],
    "description": "less变量"
  }
}
